#!/usr/bin/env node

/**
 * Script ƒë·ªÉ t·ª± ƒë·ªông refactor c√°c API routes s·ª≠ d·ª•ng helper functions
 * Ch·∫°y: node scripts/refactor-api-routes.js
 */

const fs = require('fs');
const path = require('path');

// Danh s√°ch c√°c API routes c·∫ßn refactor
const routesToRefactor = [
  {
    path: 'app/api/races/route.ts',
    type: 'crud',
    endpoint: '/api/races',
    errorMessages: {
      get: 'L·∫•y danh s√°ch gi·∫£i ch·∫°y th·∫•t b·∫°i',
      post: 'T·∫°o gi·∫£i ch·∫°y th·∫•t b·∫°i'
    }
  },
  {
    path: 'app/api/races/[id]/route.ts',
    type: 'resource',
    endpoint: '/api/races',
    errorMessages: {
      get: 'L·∫•y th√¥ng tin gi·∫£i ch·∫°y th·∫•t b·∫°i',
      put: 'C·∫≠p nh·∫≠t gi·∫£i ch·∫°y th·∫•t b·∫°i',
      delete: 'X√≥a gi·∫£i ch·∫°y th·∫•t b·∫°i'
    }
  },
  {
    path: 'app/api/events/route.ts',
    type: 'crud',
    endpoint: '/api/events',
    errorMessages: {
      get: 'L·∫•y danh s√°ch s·ª± ki·ªán th·∫•t b·∫°i',
      post: 'T·∫°o s·ª± ki·ªán th·∫•t b·∫°i'
    }
  },
  {
    path: 'app/api/events/[id]/route.ts',
    type: 'resource',
    endpoint: '/api/events',
    errorMessages: {
      get: 'L·∫•y th√¥ng tin s·ª± ki·ªán th·∫•t b·∫°i',
      put: 'C·∫≠p nh·∫≠t s·ª± ki·ªán th·∫•t b·∫°i',
      delete: 'X√≥a s·ª± ki·ªán th·∫•t b·∫°i'
    }
  },
  {
    path: 'app/api/challenges/route.ts',
    type: 'crud',
    endpoint: '/api/challenges',
    errorMessages: {
      get: 'L·∫•y danh s√°ch th·ª≠ th√°ch th·∫•t b·∫°i',
      post: 'T·∫°o th·ª≠ th√°ch th·∫•t b·∫°i'
    }
  },
  {
    path: 'app/api/challenges/[id]/route.ts',
    type: 'resource',
    endpoint: '/api/challenges',
    errorMessages: {
      get: 'L·∫•y th√¥ng tin th·ª≠ th√°ch th·∫•t b·∫°i',
      put: 'C·∫≠p nh·∫≠t th·ª≠ th√°ch th·∫•t b·∫°i',
      delete: 'X√≥a th·ª≠ th√°ch th·∫•t b·∫°i'
    }
  },
  {
    path: 'app/api/achievements/route.ts',
    type: 'crud',
    endpoint: '/api/achievements',
    errorMessages: {
      get: 'L·∫•y danh s√°ch th√†nh t√≠ch th·∫•t b·∫°i',
      post: 'T·∫°o th√†nh t√≠ch th·∫•t b·∫°i'
    }
  },
  {
    path: 'app/api/achievements/[id]/route.ts',
    type: 'resource',
    endpoint: '/api/achievements',
    errorMessages: {
      get: 'L·∫•y th√¥ng tin th√†nh t√≠ch th·∫•t b·∫°i',
      put: 'C·∫≠p nh·∫≠t th√†nh t√≠ch th·∫•t b·∫°i',
      delete: 'X√≥a th√†nh t√≠ch th·∫•t b·∫°i'
    }
  }
];

function generateCrudRoute(endpoint, errorMessages) {
  const errorMessagesStr = Object.entries(errorMessages)
    .map(([key, value]) => `  ${key}: '${value}'`)
    .join(',\n');

  return `import { createCrudRoute } from '@/lib/api-helpers';

const { GET, POST } = createCrudRoute('${endpoint}', {
${errorMessagesStr}
});

export { GET, POST };`;
}

function generateResourceRoute(endpoint, errorMessages) {
  const errorMessagesStr = Object.entries(errorMessages)
    .map(([key, value]) => `  ${key}: '${value}'`)
    .join(',\n');

  return `import { createResourceRoute } from '@/lib/api-helpers';

const { GET, PUT, DELETE } = createResourceRoute('${endpoint}', {
${errorMessagesStr}
});

export { GET, PUT, DELETE };`;
}

function refactorRoute(route) {
  const fullPath = path.join(process.cwd(), route.path);
  
  if (!fs.existsSync(fullPath)) {
    console.log(`‚ö†Ô∏è  File not found: ${route.path}`);
    return;
  }

  let newContent;
  if (route.type === 'crud') {
    newContent = generateCrudRoute(route.endpoint, route.errorMessages);
  } else if (route.type === 'resource') {
    newContent = generateResourceRoute(route.endpoint, route.errorMessages);
  }

  // Backup original file
  const backupPath = fullPath + '.backup';
  fs.copyFileSync(fullPath, backupPath);
  console.log(`üìÅ Backup created: ${backupPath}`);

  // Write new content
  fs.writeFileSync(fullPath, newContent);
  console.log(`‚úÖ Refactored: ${route.path}`);
}

function main() {
  console.log('üöÄ Starting API routes refactoring...\n');

  routesToRefactor.forEach(route => {
    refactorRoute(route);
  });

  console.log('\n‚ú® Refactoring completed!');
  console.log('\nüìù Next steps:');
  console.log('1. Test the refactored routes');
  console.log('2. Remove .backup files if everything works');
  console.log('3. Commit the changes');
}

if (require.main === module) {
  main();
}

module.exports = { refactorRoute, generateCrudRoute, generateResourceRoute };
