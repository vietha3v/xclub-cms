'use client';

import React, { useState } from 'react';
import { Eraser, ChevronDown, ChevronUp } from 'lucide-react';
import { EventType, EventStatus, EventVisibility } from '@/types/event';

interface EventFiltersProps {
  filters: {
    page: number;
    limit: number;
    search: string;
    type: string;
    status: string;
    visibility: string;
    clubId: string;
  };
  onFilterChange: (filters: Partial<typeof filters>) => void;
}

export default function EventFilters({ filters, onFilterChange }: EventFiltersProps) {
  const [isCollapsed, setIsCollapsed] = useState(true);

  const types = [
    { value: '', label: 'T·∫•t c·∫£ lo·∫°i' },
    { value: EventType.TRAINING, label: 'üèÉ‚Äç‚ôÇÔ∏è T·∫≠p luy·ªán' },
    { value: EventType.COMPETITION, label: 'üèÜ Thi ƒë·∫•u' },
    { value: EventType.SOCIAL, label: 'üë• Giao l∆∞u' },
    { value: EventType.CHARITY, label: '‚ù§Ô∏è T·ª´ thi·ªán' },
    { value: EventType.WORKSHOP, label: 'üìö Workshop' },
    { value: EventType.MEETUP, label: 'ü§ù G·∫∑p m·∫∑t' },
    { value: EventType.KNOWLEDGE_SHARING, label: 'üí° Chia s·∫ª ki·∫øn th·ª©c' },
    { value: EventType.BIRTHDAY, label: 'üéÇ Sinh nh·∫≠t' },
    { value: EventType.CELEBRATION, label: 'üéâ K·ª∑ ni·ªám' },
    { value: EventType.TEAM_BUILDING, label: 'ü§ù Team building' },
    { value: EventType.HEALTH_CHECK, label: 'üè• Kh√°m s·ª©c kh·ªèe' },
    { value: EventType.NUTRITION_TALK, label: 'ü•ó Dinh d∆∞·ª°ng' },
    { value: EventType.EQUIPMENT_REVIEW, label: '‚öôÔ∏è ƒê√°nh gi√° thi·∫øt b·ªã' },
    { value: EventType.ROUTE_EXPLORATION, label: 'üó∫Ô∏è Kh√°m ph√° tuy·∫øn ƒë∆∞·ªùng' },
    { value: EventType.OTHER, label: 'üìã Kh√°c' },
  ];

  const statusOptions = [
    { value: '', label: 'T·∫•t c·∫£ tr·∫°ng th√°i' },
    { value: EventStatus.UPCOMING, label: '‚è≥ S·∫Øp t·ªõi' },
    { value: EventStatus.ACTIVE, label: 'üü¢ ƒêang di·ªÖn ra' },
    { value: EventStatus.COMPLETED, label: '‚úÖ ƒê√£ k·∫øt th√∫c' },
    { value: EventStatus.CANCELLED, label: '‚ùå ƒê√£ h·ªßy' },
  ];

  const visibilityOptions = [
    { value: '', label: 'T·∫•t c·∫£ quy·ªÅn ri√™ng t∆∞' },
    { value: EventVisibility.PUBLIC, label: 'üåê C√¥ng khai' },
    { value: EventVisibility.CLUB_ONLY, label: 'üîí Ch·ªâ th√†nh vi√™n CLB' },
  ];

  const handleInputChange = (field: keyof typeof filters, value: string | number) => {
    onFilterChange({ [field]: value });
  };

  const clearFilters = () => {
    onFilterChange({
      type: '',
      status: '',
      visibility: '',
      clubId: '',
    });
  };

  const hasActiveFilters = filters.type || filters.status || filters.visibility || filters.clubId;

  return (
    <div className="bg-base-100 rounded-lg shadow-sm p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold">B·ªô l·ªçc</h3>
        <div className="flex items-center gap-2">
          <button
            onClick={clearFilters}
            className="btn btn-ghost btn-sm"
          >
            <Eraser className="w-4 h-4 mr-1" />
            X√≥a b·ªô l·ªçc
          </button>
          <button
            onClick={() => setIsCollapsed(!isCollapsed)}
            className="btn btn-ghost btn-sm"
          >
            {isCollapsed ? (
              <>
                <ChevronDown className="w-4 h-4 mr-1" />
                M·ªü r·ªông
              </>
            ) : (
              <>
                <ChevronUp className="w-4 h-4 mr-1" />
                Thu g·ªçn
              </>
            )}
          </button>
        </div>
      </div>

      {!isCollapsed && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {/* Lo·∫°i s·ª± ki·ªán */}
          <div className="form-control">
            <label className="label">
              <span className="label-text">Lo·∫°i s·ª± ki·ªán</span>
            </label>
            <select
              className="select select-bordered select-md"
              value={filters.type}
              onChange={(e) => handleInputChange('type', e.target.value)}
            >
              {types.map((option, index) => (
                <option key={`event-type-${option.value || index}`} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>

          {/* Tr·∫°ng th√°i */}
          <div className="form-control">
            <label className="label">
              <span className="label-text">Tr·∫°ng th√°i</span>
            </label>
            <select
              className="select select-bordered select-md"
              value={filters.status}
              onChange={(e) => handleInputChange('status', e.target.value)}
            >
              {statusOptions.map((option, index) => (
                <option key={`status-${option.value || index}`} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>

          {/* Quy·ªÅn ri√™ng t∆∞ */}
          <div className="form-control">
            <label className="label">
              <span className="label-text">Quy·ªÅn ri√™ng t∆∞</span>
            </label>
            <select
              className="select select-bordered select-md"
              value={filters.visibility}
              onChange={(e) => handleInputChange('visibility', e.target.value)}
            >
              {visibilityOptions.map((option, index) => (
                <option key={`visibility-${option.value || index}`} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>

          {/* CLB */}
          <div className="form-control">
            <label className="label">
              <span className="label-text">C√¢u l·∫°c b·ªô</span>
            </label>
            <input
              type="text"
              placeholder="Nh·∫≠p ID CLB..."
              className="input input-bordered input-md"
              value={filters.clubId}
              onChange={(e) => handleInputChange('clubId', e.target.value)}
            />
          </div>
        </div>
      )}
    </div>
  );
}