'use client';

import React, { useState } from 'react';
import { ActivityType, ActivityStatus } from '@/types/activity';

interface ActivityFilters {
  search: string;
  type: string;
  status: string;
  source: string;
  startDate: string;
  endDate: string;
  minDistance: string;
  maxDistance: string;
  minDuration: string;
  maxDuration: string;
  sortBy: string;
  sortOrder: 'ASC' | 'DESC';
}

interface ActivityFiltersProps {
  filters: ActivityFilters;
  onFilterChange: (filters: Partial<ActivityFilters>) => void;
}

export default function ActivityFilters({ filters, onFilterChange }: ActivityFiltersProps) {
  const [isCollapsed, setIsCollapsed] = useState(true);
  const activityTypes = [
    { value: '', label: 'T·∫•t c·∫£ lo·∫°i' },
    { value: ActivityType.RUNNING, label: 'üèÉ‚Äç‚ôÇÔ∏è Ch·∫°y b·ªô' },
    { value: ActivityType.TRAIL_RUNNING, label: 'üèÉ‚Äç‚ôÇÔ∏è Ch·∫°y trail' },
    { value: ActivityType.JOGGING, label: 'üèÉ‚Äç‚ôÇÔ∏è Ch·∫°y ch·∫≠m' },
    { value: ActivityType.CYCLING, label: 'üö¥‚Äç‚ôÇÔ∏è ƒê·∫°p xe' },
    { value: ActivityType.MOUNTAIN_BIKING, label: 'üö¥‚Äç‚ôÇÔ∏è ƒê·∫°p xe leo n√∫i' },
    { value: ActivityType.SWIMMING, label: 'üèä‚Äç‚ôÇÔ∏è B∆°i l·ªôi' },
    { value: ActivityType.WALKING, label: 'üö∂‚Äç‚ôÇÔ∏è ƒêi b·ªô' },
    { value: ActivityType.HIKING, label: 'ü•æ Leo n√∫i' },
    { value: ActivityType.YOGA, label: 'üßò‚Äç‚ôÄÔ∏è Yoga' },
    { value: ActivityType.WEIGHT_TRAINING, label: 'üèãÔ∏è‚Äç‚ôÇÔ∏è T·∫≠p t·∫°' },
    { value: ActivityType.OTHER, label: 'üèÉ‚Äç‚ôÇÔ∏è Kh√°c' },
  ];

  const statusOptions = [
    { value: '', label: 'T·∫•t c·∫£ tr·∫°ng th√°i' },
    { value: ActivityStatus.SYNCED, label: 'ƒê√£ ƒë·ªìng b·ªô' },
    { value: ActivityStatus.PROCESSING, label: 'ƒêang x·ª≠ l√Ω' },
    { value: ActivityStatus.ERROR, label: 'L·ªói ƒë·ªìng b·ªô' },
  ];

  const sourceOptions = [
    { value: '', label: 'T·∫•t c·∫£ ngu·ªìn' },
    { value: 'strava', label: 'Strava' },
    { value: 'garmin', label: 'Garmin' },
    { value: 'apple_health', label: 'Apple Health' },
    { value: 'google_fit', label: 'Google Fit' },
    { value: 'manual', label: 'Th·ªß c√¥ng' },
  ];

  const sortOptions = [
    { value: 'startTime', label: 'Th·ªùi gian' },
    { value: 'distance', label: 'Kho·∫£ng c√°ch' },
    { value: 'duration', label: 'Th·ªùi l∆∞·ª£ng' },
    { value: 'calories', label: 'Calories' },
    { value: 'createdAt', label: 'Ng√†y t·∫°o' },
  ];

  const handleInputChange = (field: keyof ActivityFilters, value: any) => {
    onFilterChange({ [field]: value });
  };

  const clearFilters = () => {
    onFilterChange({
      type: '',
      status: '',
      source: '',
      startDate: '',
      endDate: '',
      minDistance: '',
      maxDistance: '',
      minDuration: '',
      maxDuration: '',
      sortBy: 'startTime',
      sortOrder: 'DESC',
    });
  };

  return (
    <div className="bg-base-100 rounded-lg shadow-sm p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold">B·ªô l·ªçc</h3>
        <div className="flex items-center gap-2">
          <button
            onClick={clearFilters}
            className="btn btn-ghost btn-sm"
          >
            X√≥a b·ªô l·ªçc
          </button>
          <button
            onClick={() => setIsCollapsed(!isCollapsed)}
            className="btn btn-ghost btn-sm"
          >
            {isCollapsed ? (
              <>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                </svg>
                M·ªü r·ªông
              </>
            ) : (
              <>
                <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                </svg>
                Thu g·ªçn
              </>
            )}
          </button>
        </div>
      </div>

      {!isCollapsed && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {/* Lo·∫°i ho·∫°t ƒë·ªông */}
        <div className="form-control">
          <label className="label">
            <span className="label-text">Lo·∫°i ho·∫°t ƒë·ªông</span>
          </label>
          <select
            className="select select-bordered select-sm"
            value={filters.type}
            onChange={(e) => handleInputChange('type', e.target.value as ActivityType | '')}
          >
            {activityTypes.map((option, index) => (
              <option key={`activity-type-${option.value || index}`} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Tr·∫°ng th√°i */}
        <div className="form-control">
          <label className="label">
            <span className="label-text">Tr·∫°ng th√°i</span>
          </label>
          <select
            className="select select-bordered select-sm"
            value={filters.status}
            onChange={(e) => handleInputChange('status', e.target.value as ActivityStatus | '')}
          >
            {statusOptions.map((option, index) => (
              <option key={`status-${option.value || index}`} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Ngu·ªìn d·ªØ li·ªáu */}
        <div className="form-control">
          <label className="label">
            <span className="label-text">Ngu·ªìn d·ªØ li·ªáu</span>
          </label>
          <select
            className="select select-bordered select-sm"
            value={filters.source}
            onChange={(e) => handleInputChange('source', e.target.value)}
          >
            {sourceOptions.map((option, index) => (
              <option key={`source-${option.value || index}`} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        {/* Kho·∫£ng th·ªùi gian */}
        <div className="form-control">
          <label className="label">
            <span className="label-text">T·ª´ ng√†y</span>
          </label>
          <input
            type="date"
            className="input input-bordered input-sm"
            value={filters.startDate}
            onChange={(e) => handleInputChange('startDate', e.target.value)}
          />
        </div>

        <div className="form-control">
          <label className="label">
            <span className="label-text">ƒê·∫øn ng√†y</span>
          </label>
          <input
            type="date"
            className="input input-bordered input-sm"
            value={filters.endDate}
            onChange={(e) => handleInputChange('endDate', e.target.value)}
          />
        </div>

        {/* Kho·∫£ng c√°ch */}
        <div className="form-control">
          <label className="label">
            <span className="label-text">Kho·∫£ng c√°ch t·ªëi thi·ªÉu (km)</span>
          </label>
          <input
            type="number"
            className="input input-bordered input-sm"
            placeholder="0"
            value={filters.minDistance || ''}
            onChange={(e) => handleInputChange('minDistance', e.target.value && !isNaN(parseFloat(e.target.value)) ? parseFloat(e.target.value) : '')}
          />
        </div>

        <div className="form-control">
          <label className="label">
            <span className="label-text">Kho·∫£ng c√°ch t·ªëi ƒëa (km)</span>
          </label>
          <input
            type="number"
            className="input input-bordered input-sm"
            placeholder="100"
            value={filters.maxDistance || ''}
            onChange={(e) => handleInputChange('maxDistance', e.target.value && !isNaN(parseFloat(e.target.value)) ? parseFloat(e.target.value) : '')}
          />
        </div>

        {/* Th·ªùi l∆∞·ª£ng */}
        <div className="form-control">
          <label className="label">
            <span className="label-text">Th·ªùi l∆∞·ª£ng t·ªëi thi·ªÉu (ph√∫t)</span>
          </label>
          <input
            type="number"
            className="input input-bordered input-sm"
            placeholder="0"
            value={filters.minDuration || ''}
            onChange={(e) => handleInputChange('minDuration', e.target.value && !isNaN(parseInt(e.target.value)) ? parseInt(e.target.value) * 60 : '')}
          />
        </div>

        <div className="form-control">
          <label className="label">
            <span className="label-text">Th·ªùi l∆∞·ª£ng t·ªëi ƒëa (ph√∫t)</span>
          </label>
          <input
            type="number"
            className="input input-bordered input-sm"
            placeholder="180"
            value={filters.maxDuration || ''}
            onChange={(e) => handleInputChange('maxDuration', e.target.value && !isNaN(parseInt(e.target.value)) ? parseInt(e.target.value) * 60 : '')}
          />
        </div>

        {/* S·∫Øp x·∫øp */}
        <div className="form-control">
          <label className="label">
            <span className="label-text">S·∫Øp x·∫øp theo</span>
          </label>
          <select
            className="select select-bordered select-sm"
            value={filters.sortBy}
            onChange={(e) => handleInputChange('sortBy', e.target.value as any)}
          >
            {sortOptions.map((option, index) => (
              <option key={`sort-${option.value || index}`} value={option.value}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        <div className="form-control">
          <label className="label">
            <span className="label-text">Th·ª© t·ª±</span>
          </label>
          <select
            className="select select-bordered select-sm"
            value={filters.sortOrder}
            onChange={(e) => handleInputChange('sortOrder', e.target.value as 'ASC' | 'DESC')}
          >
            <option key="sort-order-desc" value="DESC">Gi·∫£m d·∫ßn</option>
            <option key="sort-order-asc" value="ASC">TƒÉng d·∫ßn</option>
          </select>
        </div>
        </div>
      )}
    </div>
  );
}
