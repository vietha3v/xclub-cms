'use client';

import React, { useState, useEffect } from 'react';
import { useFormContext } from 'react-hook-form';
import { TeamChallengeFormData } from './schemas';
import useAxios from '@/hooks/useAxios';

interface Club {
  id: string;
  name: string;
  description?: string;
  memberCount: number;
  isMember: boolean;
  isAdmin: boolean; // Admin CLB
  isGuest: boolean; // Kh√°ch CLB
}

export default function ClubSelectionSection() {
  const { register, watch, setValue, formState: { errors } } = useFormContext<TeamChallengeFormData>();
  const [clubs, setClubs] = useState<Club[]>([]);
  const [loading, setLoading] = useState(true);
  
  // API ƒë·ªÉ l·∫•y danh s√°ch clubs (admin + member)
  const [{ loading: apiLoading }, execute] = useAxios<Club[]>(
    { url: '/api/clubs/my-clubs', method: 'GET' },
    { manual: true }
  );

  const createdByClubId = watch('createdByClubId') || '';
  const invitedClubs = watch('invitedClubs') || [];

  // Load clubs khi component mount
  useEffect(() => {
    const loadClubs = async () => {
      try {
        setLoading(true);
        // Fake data cho testing
        const fakeClubs: Club[] = [
          {
            id: 'club-1',
            name: 'CLB Ch·∫°y B·ªô H√† N·ªôi',
            description: 'C√¢u l·∫°c b·ªô ch·∫°y b·ªô h√†ng ƒë·∫ßu t·∫°i H√† N·ªôi',
            memberCount: 150,
            isMember: true,
            isAdmin: true, // User l√† admin c·ªßa CLB n√†y
            isGuest: false
          },
          {
            id: 'club-2', 
            name: 'Runners S√†i G√≤n',
            description: 'C·ªông ƒë·ªìng runner nƒÉng ƒë·ªông t·∫°i TP.HCM',
            memberCount: 200,
            isMember: true,
            isAdmin: false, // User ch·ªâ l√† th√†nh vi√™n
            isGuest: false
          },
          {
            id: 'club-3',
            name: 'Marathon ƒê√† N·∫µng',
            description: 'CLB marathon chuy√™n nghi·ªáp t·∫°i ƒê√† N·∫µng',
            memberCount: 80,
            isMember: true,
            isAdmin: true, // User l√† admin c·ªßa CLB n√†y
            isGuest: false
          },
          {
            id: 'club-4',
            name: 'CLB Ch·∫°y B·ªô C·∫ßn Th∆°',
            description: 'C·ªông ƒë·ªìng runner t·∫°i C·∫ßn Th∆°',
            memberCount: 60,
            isMember: false,
            isAdmin: false,
            isGuest: true // User l√† kh√°ch c·ªßa CLB n√†y
          },
          {
            id: 'club-5',
            name: 'H·∫£i Ph√≤ng Runners',
            description: 'CLB ch·∫°y b·ªô t·∫°i H·∫£i Ph√≤ng',
            memberCount: 45,
            isMember: false,
            isAdmin: false,
            isGuest: true // User l√† kh√°ch c·ªßa CLB n√†y
          }
        ];
        
        setClubs(fakeClubs);
        
        // Uncomment ƒë·ªÉ d√πng API th·∫≠t
        // API s·∫Ω tr·∫£ v·ªÅ danh s√°ch CLB v·ªõi isAdmin, isMember, isGuest
        // const response = await execute();
        // if (response.data) {
        //   setClubs(response.data);
        // }
      } catch (error) {
        console.error('Error loading clubs:', error);
      } finally {
        setLoading(false);
      }
    };

    loadClubs();
  }, [execute]);

  const handleCreatedByClubChange = (clubId: string) => {
    setValue('createdByClubId', clubId);
    // T·ª± ƒë·ªông th√™m CLB t·∫°o v√†o danh s√°ch m·ªùi n·∫øu ch∆∞a c√≥
    const currentInvited = invitedClubs || [];
    const isAlreadyInvited = currentInvited.some(item => item.clubId === clubId);
    
    if (!isAlreadyInvited) {
      setValue('invitedClubs', [...currentInvited, { clubId, maxParticipants: 10 }]);
    }
  };

  const handleInvitedClubToggle = (clubId: string) => {
    const currentInvited = invitedClubs || [];
    const isInvited = currentInvited.some(item => item.clubId === clubId);
    
    if (isInvited) {
      // B·ªè m·ªùi CLB
      const newInvited = currentInvited.filter(item => item.clubId !== clubId);
      setValue('invitedClubs', newInvited);
    } else {
      // Th√™m m·ªùi CLB v·ªõi s·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh
      setValue('invitedClubs', [...currentInvited, { clubId, maxParticipants: 10 }]);
    }
  };

  const handleMaxParticipantsChange = (clubId: string, maxParticipants: number) => {
    const currentInvited = invitedClubs || [];
    const newInvited = currentInvited.map(item => 
      item.clubId === clubId 
        ? { ...item, maxParticipants }
        : item
    );
    setValue('invitedClubs', newInvited);
  };

  const isClubInvited = (clubId: string) => {
    return invitedClubs.some(item => item.clubId === clubId);
  };

  const getClubMaxParticipants = (clubId: string) => {
    const invitedClub = invitedClubs.find(item => item.clubId === clubId);
    return invitedClub?.maxParticipants || 10;
  };

  if (loading || apiLoading) {
    return (
      <div className="card bg-base-100 shadow-sm">
        <div className="card-body">
          <h3 className="card-title text-lg font-semibold mb-4">C√†i ƒë·∫∑t CLB</h3>
          <div className="flex justify-center items-center py-8">
            <span className="loading loading-spinner loading-md"></span>
            <span className="ml-2">ƒêang t·∫£i danh s√°ch CLB...</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Ph·∫ßn 1: Ch·ªçn CLB t·∫°o th·ª≠ th√°ch */}
      <div className="card bg-base-100 shadow-sm">
        <div className="card-body">
          <h3 className="card-title text-lg font-semibold mb-4">CLB t·∫°o th·ª≠ th√°ch</h3>
          
          <div className="text-sm text-base-content/70 mb-4">
            Ch·ªçn CLB s·∫Ω t·∫°o ra th·ª≠ th√°ch n√†y. CLB n√†y s·∫Ω c√≥ quy·ªÅn qu·∫£n l√Ω th·ª≠ th√°ch.
          </div>

          {clubs.filter(club => club.isAdmin).length === 0 ? (
            <div className="text-center py-8 text-base-content/60">
              <p>B·∫°n ch∆∞a l√† admin c·ªßa CLB n√†o.</p>
              <p className="text-sm mt-2">Ch·ªâ admin CLB m·ªõi c√≥ th·ªÉ t·∫°o th·ª≠ th√°ch t·∫≠p th·ªÉ.</p>
            </div>
          ) : (
            <div className="space-y-3">
              {clubs.filter(club => club.isAdmin).map((club) => (
                <div
                  key={club.id}
                  className={`card bg-base-200 shadow-sm cursor-pointer transition-all duration-200 ${
                    createdByClubId === club.id
                      ? 'ring-2 ring-primary bg-primary/10'
                      : 'hover:shadow-md'
                  }`}
                  onClick={() => handleCreatedByClubChange(club.id)}
                >
                  <div className="card-body p-4">
                    <div className="flex items-center justify-between">
                      <div className="flex-1">
                        <h4 className="font-semibold text-base">{club.name}</h4>
                        {club.description && (
                          <p className="text-sm text-base-content/70 mt-1">{club.description}</p>
                        )}
                        <div className="flex items-center gap-4 mt-2 text-xs text-base-content/60">
                          <span>üë• {club.memberCount} th√†nh vi√™n</span>
                          {club.isAdmin ? (
                            <span className="text-warning">üëë Admin</span>
                          ) : club.isMember ? (
                            <span className="text-success">‚úì Th√†nh vi√™n</span>
                          ) : club.isGuest ? (
                            <span className="text-info">üëã Kh√°ch</span>
                          ) : null}
                        </div>
                      </div>
                      <div className="ml-4">
                        <input
                          type="radio"
                          name="createdByClubId"
                          className="radio radio-primary"
                          checked={createdByClubId === club.id}
                          onChange={() => handleCreatedByClubChange(club.id)}
                          onClick={(e) => e.stopPropagation()}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}

          {errors.createdByClubId && (
            <div className="text-error text-sm mt-2">
              {errors.createdByClubId.message}
            </div>
          )}
        </div>
      </div>

      {/* Ph·∫ßn 2: Ch·ªçn CLB ƒë∆∞·ª£c m·ªùi tham gia */}
      <div className="card bg-base-100 shadow-sm">
        <div className="card-body">
          <h3 className="card-title text-lg font-semibold mb-4">CLB ƒë∆∞·ª£c m·ªùi tham gia</h3>
          
          <div className="text-sm text-base-content/70 mb-4">
            Ch·ªçn c√°c CLB m√† b·∫°n mu·ªën m·ªùi tham gia th·ª≠ th√°ch n√†y. CLB t·∫°o th·ª≠ th√°ch s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c th√™m v√†o danh s√°ch m·ªùi.
          </div>

          {clubs.length === 0 ? (
            <div className="text-center py-8 text-base-content/60">
              <p>B·∫°n ch∆∞a tham gia CLB n√†o.</p>
              <p className="text-sm mt-2">H√£y tham gia CLB tr∆∞·ªõc khi t·∫°o th·ª≠ th√°ch t·∫≠p th·ªÉ.</p>
            </div>
          ) : (
            <div className="space-y-3">
              {clubs.map((club) => {
                const isInvited = isClubInvited(club.id);
                const maxParticipants = getClubMaxParticipants(club.id);
                
                return (
                  <div
                    key={club.id}
                    className={`card bg-base-200 shadow-sm transition-all duration-200 ${
                      isInvited
                        ? 'ring-2 ring-primary bg-primary/10'
                        : 'hover:shadow-md'
                    }`}
                  >
                    <div className="card-body p-4">
                      <div className="flex items-center justify-between">
                        <div className="flex-1">
                          <h4 className="font-semibold text-base">{club.name}</h4>
                          {club.description && (
                            <p className="text-sm text-base-content/70 mt-1">{club.description}</p>
                          )}
                          <div className="flex items-center gap-4 mt-2 text-xs text-base-content/60">
                            <span>üë• {club.memberCount} th√†nh vi√™n</span>
                            {club.isAdmin ? (
                              <span className="text-warning">üëë Admin</span>
                            ) : club.isMember ? (
                              <span className="text-success">‚úì Th√†nh vi√™n</span>
                            ) : club.isGuest ? (
                              <span className="text-info">üëã Kh√°ch</span>
                            ) : null}
                            {createdByClubId === club.id && (
                              <span className="text-primary">üèÜ CLB t·∫°o th·ª≠ th√°ch</span>
                            )}
                          </div>
                        </div>
                        <div className="ml-4 flex items-center gap-3">
                          <input
                            type="checkbox"
                            className="checkbox checkbox-primary"
                            checked={isInvited}
                            onChange={() => handleInvitedClubToggle(club.id)}
                          />
                        </div>
                      </div>
                      
                      {/* Input s·ªë l∆∞·ª£ng ng∆∞·ªùi m·ªùi - ch·ªâ hi·ªán khi CLB ƒë∆∞·ª£c ch·ªçn */}
                      {isInvited && (
                        <div className="mt-4 pt-4 border-t border-base-300">
                          <div className="flex items-center gap-3">
                            <label className="text-sm font-medium">
                              S·ªë l∆∞·ª£ng ng∆∞·ªùi m·ªùi t·ªëi ƒëa:
                            </label>
                            <input
                              type="number"
                              min="1"
                              max={club.memberCount}
                              value={maxParticipants}
                              onChange={(e) => handleMaxParticipantsChange(club.id, parseInt(e.target.value) || 1)}
                              className="input input-bordered input-sm w-20"
                              onClick={(e) => e.stopPropagation()}
                            />
                            <span className="text-xs text-base-content/60">
                              / {club.memberCount} th√†nh vi√™n
                            </span>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          )}

          {errors.invitedClubs && (
            <div className="text-error text-sm mt-2">
              {errors.invitedClubs.message}
            </div>
          )}

          <div className="mt-4 p-3 bg-info/10 rounded-lg">
            <div className="flex items-start gap-2">
              <span className="text-info">‚ÑπÔ∏è</span>
              <div className="text-sm text-info">
                <p className="font-medium">L∆∞u √Ω:</p>
                <ul className="mt-1 space-y-1">
                  <li>‚Ä¢ CLB t·∫°o th·ª≠ th√°ch s·∫Ω t·ª± ƒë·ªông ƒë∆∞·ª£c th√™m v√†o danh s√°ch m·ªùi</li>
                  <li>‚Ä¢ C√≥ th·ªÉ m·ªùi t·∫•t c·∫£ CLB m√† b·∫°n c√≥ m·∫∑t (admin, th√†nh vi√™n, kh√°ch)</li>
                  <li>‚Ä¢ C√≥ th·ªÉ t√πy ch·ªânh s·ªë l∆∞·ª£ng ng∆∞·ªùi m·ªùi t·ªëi ƒëa cho m·ªói CLB</li>
                  <li>‚Ä¢ S·ªë l∆∞·ª£ng m·ªùi kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° t·ªïng s·ªë th√†nh vi√™n c·ªßa CLB</li>
                  <li>‚Ä¢ Th·ª≠ th√°ch s·∫Ω ƒë∆∞·ª£c g·ª≠i ƒë·∫øn t·∫•t c·∫£ CLB ƒë√£ ch·ªçn</li>
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
