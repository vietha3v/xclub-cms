'use client';

import React, { useState } from 'react';
import { Eraser, ChevronDown, ChevronUp } from 'lucide-react';

interface ClubFiltersProps {
  filters: {
    page: number;
    limit: number;
    search: string;
    type: string;
    status: string;
    city: string;
    state: string;
  };
  onFilterChange: (filters: Partial<typeof filters>) => void;
}

export default function ClubFilters({ filters, onFilterChange }: ClubFiltersProps) {
  const [isCollapsed, setIsCollapsed] = useState(true);

  const types = [
    { value: '', label: 'T·∫•t c·∫£ lo·∫°i' },
    { value: 'running', label: 'üèÉ‚Äç‚ôÇÔ∏è Ch·∫°y b·ªô' },
    { value: 'marathon', label: 'üèÉ‚Äç‚ôÇÔ∏è Marathon' },
    { value: 'trail', label: 'ü•æ Trail running' },
    { value: 'ultra', label: 'üèÉ‚Äç‚ôÇÔ∏è Ultra marathon' },
    { value: 'sprint', label: '‚ö° Sprint' },
    { value: 'relay', label: 'üèÉ‚Äç‚ôÇÔ∏è Relay' },
    { value: 'cross_country', label: 'üå≤ Cross country' },
    { value: 'track_field', label: 'üèÉ‚Äç‚ôÇÔ∏è Track & field' },
  ];

  const cities = [
    { value: '', label: 'T·∫•t c·∫£ th√†nh ph·ªë' },
    { value: 'H√† N·ªôi', label: 'H√† N·ªôi' },
    { value: 'TP.HCM', label: 'TP.HCM' },
    { value: 'ƒê√† N·∫µng', label: 'ƒê√† N·∫µng' },
    { value: 'H·∫£i Ph√≤ng', label: 'H·∫£i Ph√≤ng' },
    { value: 'C·∫ßn Th∆°', label: 'C·∫ßn Th∆°' },
    { value: 'Nha Trang', label: 'Nha Trang' },
    { value: 'Hu·∫ø', label: 'Hu·∫ø' },
    { value: 'V≈©ng T√†u', label: 'V≈©ng T√†u' },
    { value: 'ƒê√† L·∫°t', label: 'ƒê√† L·∫°t' },
    { value: 'Ph√∫ Qu·ªëc', label: 'Ph√∫ Qu·ªëc' },
  ];

  const statusOptions = [
    { value: '', label: 'T·∫•t c·∫£ tr·∫°ng th√°i' },
    { value: 'active', label: '‚úÖ Ho·∫°t ƒë·ªông' },
    { value: 'pending', label: '‚è≥ Ch·ªù duy·ªát' },
    { value: 'inactive', label: '‚ùå Kh√¥ng ho·∫°t ƒë·ªông' },
    { value: 'suspended', label: '‚è∏Ô∏è T·∫°m ng∆∞ng' },
  ];

  const handleInputChange = (field: keyof typeof filters, value: string | number) => {
    onFilterChange({ [field]: value });
  };

  const clearFilters = () => {
    onFilterChange({
      type: '',
      status: '',
      city: '',
      state: '',
    });
  };

  const hasActiveFilters = filters.type || filters.status || filters.city || filters.state;

  return (
    <div className="bg-base-100 rounded-lg shadow-sm p-6">
      <div className="flex items-center justify-between mb-4">
        <h3 className="text-lg font-semibold">B·ªô l·ªçc</h3>
        <div className="flex items-center gap-2">
          <button
            onClick={clearFilters}
            className="btn btn-ghost btn-sm"
          >
            <Eraser className="w-4 h-4 mr-1" />
            X√≥a b·ªô l·ªçc
          </button>
          <button
            onClick={() => setIsCollapsed(!isCollapsed)}
            className="btn btn-ghost btn-sm"
          >
            {isCollapsed ? (
              <>
                <ChevronDown className="w-4 h-4 mr-1" />
                M·ªü r·ªông
              </>
            ) : (
              <>
                <ChevronUp className="w-4 h-4 mr-1" />
                Thu g·ªçn
              </>
            )}
          </button>
        </div>
      </div>

      {!isCollapsed && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {/* Lo·∫°i CLB */}
          <div className="form-control">
            <label className="label">
              <span className="label-text">Lo·∫°i CLB</span>
            </label>
            <select
              className="select select-bordered select-md"
              value={filters.type}
              onChange={(e) => handleInputChange('type', e.target.value)}
            >
              {types.map((option, index) => (
                <option key={`club-type-${option.value || index}`} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>

          {/* Tr·∫°ng th√°i */}
          <div className="form-control">
            <label className="label">
              <span className="label-text">Tr·∫°ng th√°i</span>
            </label>
            <select
              className="select select-bordered select-md"
              value={filters.status}
              onChange={(e) => handleInputChange('status', e.target.value)}
            >
              {statusOptions.map((option, index) => (
                <option key={`status-${option.value || index}`} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>

          {/* Th√†nh ph·ªë */}
          <div className="form-control">
            <label className="label">
              <span className="label-text">Th√†nh ph·ªë</span>
            </label>
            <select
              className="select select-bordered select-md"
              value={filters.city}
              onChange={(e) => handleInputChange('city', e.target.value)}
            >
              {cities.map((option, index) => (
                <option key={`city-${option.value || index}`} value={option.value}>
                  {option.label}
                </option>
              ))}
            </select>
          </div>
        </div>
      )}
    </div>
  );
}