'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import useAxios from '@/hooks/useAxios';
import { useToast } from '@/components/Toast';

interface StravaConnectProps {
  onConnected?: () => void;
}

export default function StravaConnect({ onConnected }: StravaConnectProps) {
  const [isConnecting, setIsConnecting] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const router = useRouter();
  const searchParams = useSearchParams();
  const { showToast } = useToast();
  
  const [{ data: stravaStatus }, refetchStatus] = useAxios('/api/integrations/strava/status');
  const [{ loading: authorizeLoading }, executeAuthorize] = useAxios(
    {
      url: '/api/integrations/strava/authorize',
      method: 'GET'
    },
    { manual: true }
  );
  const [{ loading: callbackLoading }, executeCallback] = useAxios(
    {
      url: '/api/integrations/strava/callback',
      method: 'POST'
    },
    { manual: true }
  );
  const [{ loading: disconnectLoading }, executeDisconnect] = useAxios(
    {
      url: '/api/integrations/strava/disconnect',
      method: 'DELETE'
    },
    { manual: true }
  );

  // X·ª≠ l√Ω callback t·ª´ Strava
  useEffect(() => {
    const handleStravaCallback = async () => {
      const code = searchParams.get('code');
      const state = searchParams.get('state');

      console.log('StravaConnect: Checking callback params', { code: !!code, state: !!state });

      if (code && state) {
        console.log('StravaConnect: Processing Strava callback');
        try {
          setIsConnecting(true);
          setError(null);

          const { data } = await executeCallback({
            data: { code, state }
          });

          console.log('StravaConnect: Callback successful', data);
          
          showToast({
            type: 'success',
            message: 'K·∫øt n·ªëi Strava th√†nh c√¥ng!',
            title: 'Th√†nh c√¥ng'
          });

          // Refresh tr·∫°ng th√°i k·∫øt n·ªëi
          await refetchStatus();
          onConnected?.();
          
          // Redirect v·ªÅ trang settings s·∫°ch
          router.replace('/settings');
        } catch (err: any) {
          console.error('StravaConnect: Error handling callback:', err);
          
          let errorMessage = 'L·ªói k·∫øt n·ªëi Strava. Vui l√≤ng th·ª≠ l·∫°i.';
          
          if (err?.response?.status === 400) {
            errorMessage = 'Authorization code kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n. Vui l√≤ng th·ª≠ k·∫øt n·ªëi l·∫°i.';
          } else if (err?.response?.status === 401) {
            errorMessage = 'L·ªói x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
          }
          
          showToast({
            type: 'error',
            message: errorMessage,
            title: 'L·ªói k·∫øt n·ªëi'
          });
          
          // Redirect v·ªÅ trang settings s·∫°ch ngay c·∫£ khi l·ªói
          router.replace('/settings');
        } finally {
          setIsConnecting(false);
        }
      }
    };

    handleStravaCallback();
  }, [searchParams, executeCallback, refetchStatus, onConnected, router, showToast]);

  const handleConnect = async () => {
    try {
      setIsConnecting(true);
      setError(null);

      // L·∫•y OAuth URL t·ª´ backend b·∫±ng useAxios
      const { data } = await executeAuthorize();

      if (data?.authUrl) {
        // Redirect ƒë·∫øn Strava OAuth
        window.location.href = data.authUrl;
      } else {
        throw new Error('Kh√¥ng th·ªÉ l·∫•y OAuth URL');
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : 'L·ªói k·∫øt n·ªëi Strava');
      setIsConnecting(false);
    }
  };

  const handleDisconnect = async () => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën ng·∫Øt k·∫øt n·ªëi v·ªõi Strava?')) {
      return;
    }

    try {
      const { data } = await executeDisconnect();
      showToast({
        type: 'success',
        message: data?.message || 'ƒê√£ ng·∫Øt k·∫øt n·ªëi th√†nh c√¥ng',
        title: 'Th√†nh c√¥ng'
      });
      
      // Refresh tr·∫°ng th√°i k·∫øt n·ªëi
      await refetchStatus();
    } catch (error) {
      console.error('L·ªói ng·∫Øt k·∫øt n·ªëi:', error);
      showToast({
        type: 'error',
        message: 'L·ªói ng·∫Øt k·∫øt n·ªëi. Vui l√≤ng th·ª≠ l·∫°i.',
        title: 'L·ªói'
      });
    }
  };

  // Hi·ªÉn th·ªã loading khi ƒëang x·ª≠ l√Ω callback ho·∫∑c authorize
  if (authorizeLoading || callbackLoading || (isConnecting && searchParams.get('code'))) {
    return (
      <div className="card bg-base-200 shadow-lg">
        <div className="card-body">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="p-3 bg-orange-50 rounded-lg text-orange-500">
                <svg className="w-8 h-8" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M15.387 17.944l-2.089-4.116h-3.065L15.387 24l5.15-10.172h-3.066m-7.008-5.599l2.836 5.599h4.172L10.463 0l-7.13 14.828h4.169"/>
                </svg>
              </div>
              <div>
                <h3 className="font-semibold text-lg">üèÉ‚Äç‚ôÇÔ∏è Strava</h3>
                <p className="text-sm text-base-content/70">ƒêang x·ª≠ l√Ω...</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <span className="loading loading-spinner loading-sm"></span>
              <span className="text-sm">ƒêang k·∫øt n·ªëi...</span>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (stravaStatus?.connected) {
    return (
      <div className="card bg-base-100 shadow-sm border border-success/20">
        <div className="card-body">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-3">
              <div className="p-3 bg-orange-50 rounded-lg text-orange-500">
                <svg className="w-8 h-8" viewBox="0 0 24 24" fill="currentColor">
                  <path d="M15.387 17.944l-2.089-4.116h-3.065L15.387 24l5.15-10.172h-3.066m-7.008-5.599l2.836 5.599h4.172L10.463 0l-7.13 14.828h4.169"/>
                </svg>
              </div>
              <div>
                <h3 className="font-semibold text-lg">üèÉ‚Äç‚ôÇÔ∏è Strava</h3>
                <p className="text-sm text-base-content/70">ƒê√£ k·∫øt n·ªëi</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <span className="badge badge-success">ƒê√£ k·∫øt n·ªëi</span>
            </div>
          </div>

          {/* Connection Details */}
          <div className="bg-base-200/50 rounded-lg p-4 mb-4">
            <h4 className="font-medium mb-2 text-sm">Th√¥ng tin k·∫øt n·ªëi</h4>
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div>
                <span className="text-base-content/70">Tr·∫°ng th√°i:</span>
                <span className="ml-2 text-success font-medium">Ho·∫°t ƒë·ªông</span>
              </div>
              <div>
                <span className="text-base-content/70">L·∫ßn cu·ªëi ƒë·ªìng b·ªô:</span>
                <span className="ml-2">
                  {stravaStatus?.lastSyncedAt 
                    ? new Date(stravaStatus.lastSyncedAt).toLocaleString('vi-VN')
                    : 'Ch∆∞a c√≥'
                  }
                </span>
              </div>
              <div>
                <span className="text-base-content/70">Quy·ªÅn truy c·∫≠p:</span>
                <span className="ml-2">ƒê·ªçc ho·∫°t ƒë·ªông</span>
              </div>
              <div>
                <span className="text-base-content/70">T·∫ßn su·∫•t:</span>
                <span className="ml-2">15 ph√∫t</span>
              </div>
            </div>
          </div>
          
          <div className="flex gap-2">
            <button 
              className="btn btn-error btn-sm flex-1"
              onClick={handleDisconnect}
              disabled={disconnectLoading}
            >
              {disconnectLoading ? (
                <>
                  <span className="loading loading-spinner loading-xs"></span>
                  ƒêang ng·∫Øt...
                </>
              ) : (
                <>
                  üîå Ng·∫Øt k·∫øt n·ªëi
                </>
              )}
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="card bg-base-100 shadow-sm">
      <div className="card-body">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-3">
            <div className="p-3 bg-orange-50 rounded-lg text-orange-500">
              <svg className="w-8 h-8" viewBox="0 0 24 24" fill="currentColor">
                <path d="M15.387 17.944l-2.089-4.116h-3.065L15.387 24l5.15-10.172h-3.066m-7.008-5.599l2.836 5.599h4.172L10.463 0l-7.13 14.828h4.169"/>
              </svg>
            </div>
            <div>
              <h3 className="font-semibold text-lg">üèÉ‚Äç‚ôÇÔ∏è Strava</h3>
              <p className="text-sm text-base-content/70">Ch∆∞a k·∫øt n·ªëi</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <span className="badge badge-ghost">Ch∆∞a k·∫øt n·ªëi</span>
          </div>
        </div>

        {/* Features */}
        <div className="bg-base-200/50 rounded-lg p-4 mb-4">
          <h4 className="font-medium mb-2 text-sm">T√≠nh nƒÉng</h4>
          <ul className="text-sm text-base-content/70 space-y-1">
            <li>‚Ä¢ ƒê·ªìng b·ªô ho·∫°t ƒë·ªông ch·∫°y b·ªô, ƒë·∫°p xe</li>
            <li>‚Ä¢ Th·ªëng k√™ chi ti·∫øt t·ª´ Strava</li>
            <li>‚Ä¢ ƒê·ªìng b·ªô t·ª± ƒë·ªông m·ªói 15 ph√∫t</li>
            <li>‚Ä¢ H·ªó tr·ª£ l·ªãch s·ª≠ 30 ng√†y</li>
          </ul>
        </div>
        
        {error && (
          <div className="alert alert-error mb-4">
            <span>{error}</span>
          </div>
        )}

        <div className="flex gap-2">
          <button 
            className={`btn btn-primary btn-sm flex-1 ${authorizeLoading ? 'loading' : ''}`}
            onClick={handleConnect}
            disabled={authorizeLoading}
          >
            {authorizeLoading ? 'ƒêang k·∫øt n·ªëi...' : 'üîó K·∫øt n·ªëi v·ªõi Strava'}
          </button>
        </div>
      </div>
    </div>
  );
}
