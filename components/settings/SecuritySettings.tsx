'use client';

import React, { useState } from 'react';
import useAxios from '@/hooks/useAxios';
import { useToast } from '@/components/Toast';
import { SettingsSkeleton } from '@/components/common/LoadingSkeleton';

interface SecuritySettings {
  twoFactorEnabled: boolean;
  loginNotifications: boolean;
  sessionTimeout: number; // in minutes
  trustedDevices: Array<{
    id: string;
    name: string;
    lastUsed: string;
    location: string;
  }>;
}

export default function SecuritySettings() {
  const [settings, setSettings] = useState<SecuritySettings>({
    twoFactorEnabled: false,
    loginNotifications: true,
    sessionTimeout: 30,
    trustedDevices: []
  });

  const [saving, setSaving] = useState(false);
  const { showToast } = useToast();

  const [{ data: securityData, loading }, refetch] = useAxios('/api/user/security');
  const [{ loading: updateLoading }, executeUpdate] = useAxios(
    {
      url: '/api/user/security',
      method: 'PUT'
    },
    { manual: true }
  );

  const handleToggle = (field: keyof SecuritySettings) => {
    if (field === 'twoFactorEnabled' || field === 'loginNotifications') {
      setSettings(prev => ({
        ...prev,
        [field]: !prev[field]
      }));
    }
  };

  const handleSessionTimeoutChange = (value: number) => {
    setSettings(prev => ({
      ...prev,
      sessionTimeout: value
    }));
  };


  const handleSaveSettings = async () => {
    try {
      setSaving(true);
      
      await executeUpdate({
        data: settings
      });
      
      showToast({
        type: 'success',
        message: 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t b·∫£o m·∫≠t th√†nh c√¥ng!',
        title: 'Th√†nh c√¥ng'
      });
    } catch (error) {
      console.error('L·ªói c·∫≠p nh·∫≠t security settings:', error);
      showToast({
        type: 'error',
        message: 'L·ªói c·∫≠p nh·∫≠t c√†i ƒë·∫∑t. Vui l√≤ng th·ª≠ l·∫°i.',
        title: 'L·ªói'
      });
    } finally {
      setSaving(false);
    }
  };

  const handleRevokeDevice = async (deviceId: string) => {
    if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën thu h·ªìi quy·ªÅn truy c·∫≠p c·ªßa thi·∫øt b·ªã n√†y?')) {
      return;
    }

    try {
      // API call to revoke device
      showToast({
        type: 'success',
        message: 'ƒê√£ thu h·ªìi quy·ªÅn truy c·∫≠p thi·∫øt b·ªã',
        title: 'Th√†nh c√¥ng'
      });
      
      // Refresh data
      refetch();
    } catch (error) {
      showToast({
        type: 'error',
        message: 'L·ªói thu h·ªìi thi·∫øt b·ªã. Vui l√≤ng th·ª≠ l·∫°i.',
        title: 'L·ªói'
      });
    }
  };

  if (loading) {
    return <SettingsSkeleton />;
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="card bg-base-100 shadow-sm">
        <div className="card-body">
          <div className="flex items-center justify-between">
            <div>
              <h2 className="text-2xl font-bold flex items-center gap-2">
                <span className="text-3xl">üîí</span>
                B·∫£o m·∫≠t t√†i kho·∫£n
              </h2>
              <p className="text-base-content/70 mt-1">
                Qu·∫£n l√Ω b·∫£o m·∫≠t v√† quy·ªÅn truy c·∫≠p t√†i kho·∫£n c·ªßa b·∫°n
              </p>
            </div>
            <button
              onClick={handleSaveSettings}
              className="btn btn-primary btn-sm"
              disabled={saving}
            >
              {saving ? (
                <>
                  <span className="loading loading-spinner loading-xs"></span>
                  ƒêang l∆∞u...
                </>
              ) : (
                'üíæ L∆∞u c√†i ƒë·∫∑t'
              )}
            </button>
          </div>
        </div>
      </div>


      {/* Two-Factor Authentication */}
      <div className="card bg-base-100 shadow-sm">
        <div className="card-body">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <span>üîê</span>
                X√°c th·ª±c hai y·∫øu t·ªë (2FA)
              </h3>
              <p className="text-sm text-base-content/70 mt-1">
                Th√™m l·ªõp b·∫£o m·∫≠t cho t√†i kho·∫£n c·ªßa b·∫°n
              </p>
            </div>
            <input
              type="checkbox"
              className="toggle toggle-primary"
              checked={settings.twoFactorEnabled}
              onChange={() => handleToggle('twoFactorEnabled')}
            />
          </div>

          {!settings.twoFactorEnabled && (
            <div className="bg-warning/10 rounded-lg p-4">
              <div className="flex items-start gap-3">
                <svg className="w-5 h-5 text-warning mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                </svg>
                <div>
                  <h4 className="font-medium text-warning">Khuy·∫øn ngh·ªã b·∫≠t 2FA</h4>
                  <p className="text-sm text-base-content/70 mt-1">
                    X√°c th·ª±c hai y·∫øu t·ªë gi√∫p b·∫£o v·ªá t√†i kho·∫£n c·ªßa b·∫°n kh·ªèi c√°c cu·ªôc t·∫•n c√¥ng.
                  </p>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Login Notifications */}
      <div className="card bg-base-100 shadow-sm">
        <div className="card-body">
          <div className="flex items-center justify-between mb-4">
            <div>
              <h3 className="text-lg font-semibold flex items-center gap-2">
                <span>üìß</span>
                Th√¥ng b√°o ƒëƒÉng nh·∫≠p
              </h3>
              <p className="text-sm text-base-content/70 mt-1">
                Nh·∫≠n email khi c√≥ ƒëƒÉng nh·∫≠p m·ªõi t·ª´ thi·∫øt b·ªã kh√°c
              </p>
            </div>
            <input
              type="checkbox"
              className="toggle toggle-primary"
              checked={settings.loginNotifications}
              onChange={() => handleToggle('loginNotifications')}
            />
          </div>
        </div>
      </div>

      {/* Session Timeout */}
      <div className="card bg-base-100 shadow-sm">
        <div className="card-body">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <span>‚è±Ô∏è</span>
            Th·ªùi gian phi√™n ƒëƒÉng nh·∫≠p
          </h3>
          
          <div className="form-control">
            <label className="label">
              <span className="label-text">T·ª± ƒë·ªông ƒëƒÉng xu·∫•t sau (ph√∫t)</span>
            </label>
            <select
              className="select select-bordered"
              value={settings.sessionTimeout}
              onChange={(e) => handleSessionTimeoutChange(Number(e.target.value))}
            >
              <option value={15}>15 ph√∫t</option>
              <option value={30}>30 ph√∫t</option>
              <option value={60}>1 gi·ªù</option>
              <option value={120}>2 gi·ªù</option>
              <option value={480}>8 gi·ªù</option>
              <option value={1440}>24 gi·ªù</option>
            </select>
          </div>
        </div>
      </div>

      {/* Trusted Devices */}
      <div className="card bg-base-100 shadow-sm">
        <div className="card-body">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <span>üì±</span>
            Thi·∫øt b·ªã ƒë√°ng tin c·∫≠y
          </h3>
          
          {settings.trustedDevices.length > 0 ? (
            <div className="space-y-3">
              {settings.trustedDevices.map((device) => (
                <div key={device.id} className="flex items-center justify-between p-3 bg-base-200 rounded-lg">
                  <div>
                    <div className="font-medium">{device.name}</div>
                    <div className="text-sm text-base-content/70">
                      {device.location} ‚Ä¢ {new Date(device.lastUsed).toLocaleString('vi-VN')}
                    </div>
                  </div>
                  <button
                    onClick={() => handleRevokeDevice(device.id)}
                    className="btn btn-error btn-xs"
                  >
                    Thu h·ªìi
                  </button>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8 text-base-content/50">
              <p>Ch∆∞a c√≥ thi·∫øt b·ªã ƒë√°ng tin c·∫≠y n√†o</p>
            </div>
          )}
        </div>
      </div>

      {/* Security Tips */}
      <div className="card bg-base-100 shadow-sm">
        <div className="card-body">
          <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
            <span>üí°</span>
            M·∫πo b·∫£o m·∫≠t
          </h3>
          
          <div className="space-y-3 text-sm">
            <div className="flex items-start gap-3">
              <span className="text-success">‚úì</span>
              <span>S·ª≠ d·ª•ng m·∫≠t kh·∫©u m·∫°nh v·ªõi √≠t nh·∫•t 8 k√Ω t·ª±</span>
            </div>
            <div className="flex items-start gap-3">
              <span className="text-success">‚úì</span>
              <span>B·∫≠t x√°c th·ª±c hai y·∫øu t·ªë (2FA)</span>
            </div>
            <div className="flex items-start gap-3">
              <span className="text-success">‚úì</span>
              <span>Kh√¥ng chia s·∫ª th√¥ng tin ƒëƒÉng nh·∫≠p</span>
            </div>
            <div className="flex items-start gap-3">
              <span className="text-success">‚úì</span>
              <span>ƒêƒÉng xu·∫•t kh·ªèi thi·∫øt b·ªã c√¥ng c·ªông</span>
            </div>
            <div className="flex items-start gap-3">
              <span className="text-success">‚úì</span>
              <span>Ki·ªÉm tra thi·∫øt b·ªã ƒë√°ng tin c·∫≠y th∆∞·ªùng xuy√™n</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
